services:
  # Zookeeper (обязательный для Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    networks:
      - ml-scorer
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Сервис Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    networks:
      - ml-scorer
    ports:
      - "9092:9092"    # внутренний и тестовый хостовый слушают одинаково
      - "9095:9095"    # внешний слушатель для локальной машины
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Объявляем оба listener-а и их порты
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9095

      # Рекламируем их под понятными адресами
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9095

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9095", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10

  # Сервис для создания топиков при старте
  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy  # Ждем пока Kafka станет здоровой
    networks:
      - ml-scorer
    restart: on-failure
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
      echo 'Ожидание готовности Kafka...'
      while ! kafka-topics --bootstrap-server kafka:9092 --list; do
        sleep 1
      done

      echo 'Создание топиков...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic transactions --partitions 3 --replication-factor 1 --config retention.ms=604800000
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic scoring --partitions 3 --replication-factor 1 --config retention.ms=604800000

      echo 'Топики успешно созданы:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  
  # Сервис для удобного просмотра топиков и настройки kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    networks:
      - ml-scorer
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  fraud_detector:
    build: ./fraud_detector
    networks:
      - ml-scorer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TRANSACTIONS_TOPIC: "transactions"
      KAFKA_SCORING_TOPIC: "scoring"
    depends_on:
      - kafka
      - kafka-setup

  db:
    image: postgres:16
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_DB: fraud
      POSTGRES_USER: fraud
      POSTGRES_PASSWORD: fraud
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "fraud"]
      interval: 10s
      retries: 5
    networks:
      - ml-scorer

  score-sink:
    build: ./score_sink
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup: 
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - ml-scorer
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      KAFKA_TOPIC: scoring
      PG_HOST: db
      PG_DB: fraud
      PG_USER: fraud
      PG_PASS: fraud


  interface:
    build: ./interface
    networks:
      - ml-scorer
    environment:
      KAFKA_BROKERS: "kafka:9092"  # Используем внутренний адрес Kafka
      KAFKA_TOPIC: "transactions"
      DB_HOST: db
      DB_PORT: "5432"
      DB_NAME: fraud
      DB_USER: fraud
      DB_PASS: fraud
    depends_on:
      - kafka
      - db
    ports:
      - "8501:8501"

networks:
  ml-scorer:
    name: ml-scorer
    driver: bridge

volumes:
  pgdata: 